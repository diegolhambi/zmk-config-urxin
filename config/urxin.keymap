#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#define BWIN 0
#define BMAC 1
#define NAV  2
#define FN   3
#define NUM  4
#define SYS  5

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH0 LH1 RH0 RH1

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50


ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

// tap: , | shift + tap: ;
ZMK_MOD_MORPH(comma_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)

// tap: . | shift + tap: :
ZMK_MOD_MORPH(dot_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DOT>, <&kp COLON>;
)

// tap: ? | shift + tap: !
ZMK_MOD_MORPH(qst_excl,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp QMARK>, <&kp EXCL>;
)

// tap: ( | shift + tap: <
ZMK_MOD_MORPH(lpar_lt,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LPAR>, <&kp LT>;
)

// tap: ) | shift + tap: >
ZMK_MOD_MORPH(rpar_gt,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp RPAR>, <&kp GT>;
)



/* Vertical combos - left hand */
ZMK_COMBO(at,      &kp AT,      LT3 LM3, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(hash,    &kp HASH,    LT2 LM2, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(dollar,  &kp DOLLAR,  LT1 LM1, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(percent, &kp PERCENT, LT0 LM0, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

ZMK_COMBO(grave, &kp GRAVE, LM3 LB3, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(bslh,  &kp BSLH,  LM2 LB2, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(equal, &kp EQUAL, LM1 LB1, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(tilde, &kp TILDE, LM0 LB0, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

/* Vertical combos - right hand */
ZMK_COMBO(caret, &kp CARET, RT0 RM0, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(amps,  &kp AMPS,  RT1 RM1, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(astrk, &kp ASTRK, RT2 RM2, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(plus,  &kp PLUS,  RT3 RM3, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

ZMK_COMBO(under, &kp UNDER, RM0 RB0, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(minus, &kp MINUS, RM1 RB1, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(slash, &kp FSLH,  RM2 RB2, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(pipe,  &kp PIPE,  RM3 RB3, BWIN BMAC NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)



/* Horizontal combos - left hand */
ZMK_COMBO(esc,   &kp ESC,   LT2 LT3, BWIN BMAC NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(enter, &kp ENTER, LT1 LT2, BWIN BMAC NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)

ZMK_COMBO(tab,  &kp TAB,  LM1 LM2, BWIN BMAC NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)

ZMK_COMBO(w_paste, &kp LC(V), LB1 LB2, BWIN, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(w_copy,  &kp LC(C), LB2 LB3, BWIN, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(w_cut,   &kp LC(X), LB1 LB3, BWIN, COMBO_TERM_FAST, COMBO_IDLE_FAST)

ZMK_COMBO(m_paste, &kp LG(V), LB1 LB2, BMAC, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(m_copy,  &kp LG(C), LB2 LB3, BMAC, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(m_cut,   &kp LG(X), LB1 LB3, BMAC, COMBO_TERM_FAST, COMBO_IDLE_FAST)

/* Horizontal combos - right hand */
ZMK_COMBO(bspc, &kp BSPC, RT1 RT2, BWIN BMAC NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)

ZMK_COMBO(lpar, &lpar_lt, RM1 RM2, BWIN BMAC NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(rpar, &rpar_gt, RM2 RM3, BWIN BMAC NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)


ZMK_COMBO(lbkt, &kp LBKT, RB1 RB2, BWIN BMAC NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(rbkt, &kp RBKT, RB2 RB3, BWIN BMAC NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)

ZMK_COMBO(w_undo, &kp LC(Z), RB3 RB4, BWIN, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(m_undo, &kp LG(Z), RB3 RB4, BMAC, COMBO_TERM_FAST, COMBO_IDLE_FAST)

/* Horizontal combos - both hands */
ZMK_COMBO(sys, &tog SYS, LB4 RB4, BWIN BMAC SYS, 50, 150)

ZMK_COMBO(bt_clear, &bt BT_CLR, LT1 LT2, SYS, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(bt_clear_all, &bt BT_CLR_ALL, LT1 LT3, SYS, COMBO_TERM_FAST, COMBO_IDLE_FAST)


ZMK_LAYER(base_win,
    &kp Q       &kp W       &kp F        &kp P        &kp B        &kp J &kp L        &kp U        &kp Y       &kp SQT
    &hml LGUI A &hml LALT R &hml LCTRL S &hml LSHFT T &kp G        &kp M &hmr RSHFT N &hmr LCTRL E &hmr RALT I &hmr RGUI O 
    &kp Z       &kp X       &kp C        &kp D        &kp V        &kp K &kp H        &comma_morph &dot_morph  &qst_excl
                                 &lt FN SPACE &num_word NUM        &lt NAV ENTER &smart_shft
)

ZMK_LAYER(base_mac,
    &trans       &trans      &trans      &trans       &trans        &trans &trans       &trans      &trans      &trans
    &hml LCTRL A &hml LALT R &hml LCMD S &hml LSHFT T &trans        &trans &hmr RSHFT N &hmr LCMD E &hmr RALT I &hmr RCTRL O 
    &trans       &kp X       &kp C        &kp D       &trans        &trans &trans       &trans      &trans      &trans
                                               &trans &trans        &trans &trans
)

ZMK_LAYER(nav,
    &trans &trans          &kp UP   &trans      &kp PG_UP        &kp PSCRN &trans &trans &trans &trans
    &trans &kp LEFT        &kp DOWN &kp RIGHT   &kp PG_DN        &trans    &trans &trans &trans &trans 
    &trans &kp LC(LS(TAB)) &trans   &kp LC(TAB) &trans           &trans    &trans &trans &trans &trans
                                            &trans &trans        &trans &trans
)

ZMK_LAYER(fn,
    &trans &trans &trans &trans &trans        &kp F12 &kp F7 &kp F8 &kp F9 &trans
    &trans &trans &trans &trans &trans        &kp F11 &kp F4 &kp F5 &kp F6 &trans 
    &trans &trans &trans &trans &trans        &kp F10 &kp F1 &kp F2 &kp F3 &trans
                         &trans &trans        &kp C_MUTE &kp C_PP
)

ZMK_LAYER(num,
    &trans &trans &trans &trans &trans        &trans &kp N7 &kp N8 &kp N9 &trans
    &trans &trans &trans &trans &trans        &trans &kp N4 &kp N5 &kp N6 &dot_morph 
    &trans &trans &trans &trans &trans        &kp N0 &kp N1 &kp N2 &kp N3 &comma_morph
                   &trans &kp K_CANCEL        &trans &trans
)

ZMK_LAYER(sys,
    &none &none &none &none &bt BT_SEL 0        &tog BMAC &none &none &none &none
    &none &none &none &none &bt BT_SEL 1        &none     &none &none &none &none 
    &none &none &none &none &bt BT_SEL 2        &none     &none &none &none &none
                           &trans &trans        &trans    &trans
)